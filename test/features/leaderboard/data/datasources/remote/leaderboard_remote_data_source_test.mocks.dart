// Mocks generated by Mockito 5.4.4 from annotations
// in hangman_game/test/features/leaderboard/data/datasources/remote/leaderboard_remote_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:flutter/services.dart' as _i6;
import 'package:flutter/widgets.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:supabase/supabase.dart' as _i2;
import 'package:supabase_flutter/src/supabase.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Supabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabase extends _i1.Mock implements _i3.Supabase {
  MockSupabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  set client(_i2.SupabaseClient? _client) => super.noSuchMethod(
        Invocation.setter(
          #client,
          _client,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void didChangeAppLifecycleState(_i5.AppLifecycleState? state) =>
      super.noSuchMethod(
        Invocation.method(
          #didChangeAppLifecycleState,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> onResumed() => (super.noSuchMethod(
        Invocation.method(
          #onResumed,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> didPopRoute() => (super.noSuchMethod(
        Invocation.method(
          #didPopRoute,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  bool handleStartBackGesture(_i6.PredictiveBackEvent? backEvent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleStartBackGesture,
          [backEvent],
        ),
        returnValue: false,
      ) as bool);

  @override
  void handleUpdateBackGestureProgress(_i6.PredictiveBackEvent? backEvent) =>
      super.noSuchMethod(
        Invocation.method(
          #handleUpdateBackGestureProgress,
          [backEvent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleCommitBackGesture() => super.noSuchMethod(
        Invocation.method(
          #handleCommitBackGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleCancelBackGesture() => super.noSuchMethod(
        Invocation.method(
          #handleCancelBackGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<bool> didPushRoute(String? route) => (super.noSuchMethod(
        Invocation.method(
          #didPushRoute,
          [route],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> didPushRouteInformation(
          _i7.RouteInformation? routeInformation) =>
      (super.noSuchMethod(
        Invocation.method(
          #didPushRouteInformation,
          [routeInformation],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void didChangeMetrics() => super.noSuchMethod(
        Invocation.method(
          #didChangeMetrics,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeTextScaleFactor() => super.noSuchMethod(
        Invocation.method(
          #didChangeTextScaleFactor,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangePlatformBrightness() => super.noSuchMethod(
        Invocation.method(
          #didChangePlatformBrightness,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeLocales(List<_i5.Locale>? locales) => super.noSuchMethod(
        Invocation.method(
          #didChangeLocales,
          [locales],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeViewFocus(_i5.ViewFocusEvent? event) => super.noSuchMethod(
        Invocation.method(
          #didChangeViewFocus,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i5.AppExitResponse> didRequestAppExit() => (super.noSuchMethod(
        Invocation.method(
          #didRequestAppExit,
          [],
        ),
        returnValue:
            _i4.Future<_i5.AppExitResponse>.value(_i5.AppExitResponse.exit),
      ) as _i4.Future<_i5.AppExitResponse>);

  @override
  void didHaveMemoryPressure() => super.noSuchMethod(
        Invocation.method(
          #didHaveMemoryPressure,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeAccessibilityFeatures() => super.noSuchMethod(
        Invocation.method(
          #didChangeAccessibilityFeatures,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
