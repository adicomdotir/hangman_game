import 'package:dartz/dartz.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:hangman_game/core/error/failure.dart';
import 'package:hangman_game/features/leaderboard/index.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';

import 'fetch_top_scores_usecase_test.mocks.dart'; // Generated by Mockito

@GenerateMocks([LeaderboardRepository])
void main() {
  late FetchTopScoresUsecase usecase;
  late MockLeaderboardRepository mockLeaderboardRepository;

  setUp(() {
    mockLeaderboardRepository = MockLeaderboardRepository();
    usecase = FetchTopScoresUsecase(mockLeaderboardRepository);
  });

  test('should get top scores from the repository', () async {
    // Arrange
    final tLeaderboardEntities = [
      LeaderboardEntity(
        score: 100,
        userEmail: 'test1@example.com',
        lastScore: 50,
      ),
      LeaderboardEntity(
        score: 90,
        userEmail: 'test2@example.com',
        lastScore: 40,
      ),
    ];
    when(mockLeaderboardRepository.fetchTopScores())
        .thenAnswer((_) async => Right(tLeaderboardEntities));

    // Act
    final result = await usecase();

    // Assert
    expect(result, Right(tLeaderboardEntities));
    verify(mockLeaderboardRepository.fetchTopScores());
    verifyNoMoreInteractions(mockLeaderboardRepository);
  });

  test('should return a Failure when data retrieval fails', () async {
    // Arrange
    final tFailure = ServerFailure(); // 'Failed to fetch data'
    when(mockLeaderboardRepository.fetchTopScores())
        .thenAnswer((_) async => Left(tFailure));

    // Act
    final result = await usecase();

    // Assert
    expect(result, Left(tFailure));
    verify(mockLeaderboardRepository.fetchTopScores());
    verifyNoMoreInteractions(mockLeaderboardRepository);
  });
}
